// Copyright 2022 @filterpaper
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM 1
#define NAV 2

#define ________ &trans

#define TAPPING_TERM 148
#define QUICK_TAP    150


&lt {
	flavor = "hold-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP>;
};

&caps_word {
	continue-list = <UNDER MINUS BSPC RSHFT LSHFT>;
};


/ {
	behaviors {
		gresc: grave_escape {
			label = "grave_escape";
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LGUI|MOD_RGUI)>;
			bindings = <&kp ESC>, <&kp GRAVE>;
		};
		ht: hold_tap {
			label = "hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
		};
		lht: left_positional_hold_tap {
			label = "left_positional_hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <
							5  6  7  8  9
			10 11 12 13    15 16 17 18 19
						   25 26 27 28 29
				  30 31 32 33>;
		};
		rht: right_positional_hold_tap {
			label = "right_positional_hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <
			 0  1  2  3  4
			10 11 12 13 14    16 17 18 19
			20 21 22 23 24
						30 31 32 33>;
		};
	};
};


#define COMBO(name, keypress, keypos) \
combo_##name {                        \
	timeout-ms = <40>;                \
	bindings = <keypress>;            \
	key-positions = <keypos>;         \
};
/* Combo key positions
 0  1  2  3  4         5  6  7  8  9
10 11 12 13 14        15 16 17 18 19
20 21 22 23 24        25 26 27 28 29
			30 31  32 33             */

/ {
	combos {
		compatible = "zmk,combos";
		//bluetooth
		COMBO(blu0, &bt BT_SEL 0, 4 5)
		COMBO(blu1, &bt BT_SEL 1, 14 15)
		COMBO(bluclr, &bt BT_CLR, 24 25)
		// horizontal left
		COMBO(esc, &kp ESC, 10 11)
		COMBO(terminal_esc, &kp LC(C), 11 12)
		COMBO(enter, &kp ENTER, 12 13)
		// horizontal right
		COMBO(search, &kp LG(SPACE), 16 17)
		COMBO(grave, &kp GRAVE, 17 18)
		COMBO(caps, &kp CAPS, 18 19)
		// vertical left
		COMBO(vol_up, &kp C_VOL_UP,  0 10)
		COMBO(vol_dn, &kp C_VOL_DN, 10 20)
		COMBO(sqt, &kp SQT, 1 11)
		COMBO(dqt, &kp DQT, 11 21)
		COMBO(colon, &kp COLON, 2 12)
		COMBO(semi, &kp SEMI, 12 22)
		COMBO(dash, &kp MINUS, 3 13)
		COMBO(under, &kp UNDER, 13 23)
		// vertical right
		COMBO(brigh_up, &kp C_BRIGHTNESS_INC, 9 19)
		COMBO(brigh_dn, &kp C_BRIGHTNESS_DEC, 19 29)
		COMBO(next, &kp C_NEXT, 8 18)
		COMBO(play, &kp C_PLAY, 7 17)
		COMBO(prev, &kp C_PREV, 6 16)
		// invoke macros
		COMBO(vim_s,  &vim_s,  0 1)
		COMBO(vim_q,  &vim_q,  1 2)
		COMBO(dir_up, &dir_up, 23 24)
	};
};


#define MACRO(name, keys)             \
name: name##_macro {                  \
	label = #name;                    \
	compatible = "zmk,behavior-macro";\
	#binding-cells = <0>;             \
	tap-ms = <1>;                     \
	wait-ms = <1>;                    \
	bindings = <keys>;                \
};

/ {
	macros {
		MACRO(vim_q,  &kp COLON &kp Q &kp EXCL &kp ENTER)
		MACRO(vim_s,  &kp COLON &kp W &kp Q &kp ENTER)
		MACRO(dir_up, &kp DOT &kp DOT &kp FSLH)
	};
};

/ {
	keymap {
		compatible = "zmk,keymap";
		BASE_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
			&kp Q      &kp W      &kp F      &kp P      &kp B          &kp J       &kp L      &kp U      &kp Y      &kp TAB
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		   	&kp A     &kp R      &kp S      &kp T     &kp G            &kp M       &kp N        &kp E      &kp I     &kp O
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp Z      &kp X      &kp C      &kp D      &kp V          &kp K       &kp H     &kp COMMA   &kp DOT    &kp FSLH
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
			                                  &mo NAV  &kp SPACE    &mt LSHFT BSPC  &mo NUM
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
		NUM_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
		   &kp DOLLAR   &kp LBRC  &kp RBRC    &kp PLUS  &kp POUND      &kp TILDE   &kp N7     &kp N8     &kp N9     &kp CARET 
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp LPAR   &kp EXCL   &kp EQUAL   &kp RPAR   &kp AMPS      &kp PIPE    &kp N1     &kp N2     &kp N3      &kp N0
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		     &kp LT    &kp LBKT   &kp RBKT    &kp GT   &kp PERCENT     &kp AT    &kp N4     &kp N5     &kp N6    &kp STAR
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
			                                  &sk LGUI  ________       ________   ________
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
		NAV_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
	        &kp LG(W)  &kp LG(A)   &sk LGUI   &kp LG(S)  ________      ________   ________   ________   ________   ________
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp LEFT   &kp DOWN    &kp UP    &kp RIGHT  &kp LG(T)    &kp LG(TILDE) &sk LGUI   &kp LG(P)  &kp LG(F)  &sk LCTRL
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		   &kp LG(Z)   &kp LG(X)  &kp LG(C)  ________   &kp LG(V)      &kp LC(R)  ________   &sk LALT  &kp BSLH  &kp LG(FSLH)
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
				                             ________   ________       ________   ________
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
	};
};