// Copyright 2022 @filterpaper
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM 1
#define NAV 2
#define SYM 3

#define Z_SLEEP  &kp LA(LG(C_PWR))
#define Z_SSAVE  &kp LC(LA(LS(LG(S))))
#define NAV_UP   &kp LS(LA(UARW))
#define NAV_DN   &kp LS(LA(DARW))
#define ________ &trans

#define TAPPING_TERM 148
#define QUICK_TAP    150


&lt {
	flavor = "hold-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP>;
};

&caps_word {
	continue-list = <UNDER MINUS BSPC RSHFT LSHFT>;
};


/ {
	behaviors {
		gresc: grave_escape {
			label = "grave_escape";
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LGUI|MOD_RGUI)>;
			bindings = <&kp ESC>, <&kp GRAVE>;
		};
		ht: hold_tap {
			label = "hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
		};
		lht: left_positional_hold_tap {
			label = "left_positional_hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <
							5  6  7  8  9
			10 11 12 13    15 16 17 18 19
						   25 26 27 28 29
				  30 31 32 33>;
		};
		rht: right_positional_hold_tap {
			label = "right_positional_hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <TAPPING_TERM>;
			quick-tap-ms = <QUICK_TAP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <
			 0  1  2  3  4
			10 11 12 13 14    16 17 18 19
			20 21 22 23 24
						30 31 32 33>;
		};
	};
};


#define COMBO(name, keypress, keypos) \
combo_##name {                        \
	timeout-ms = <30>;                \
	bindings = <keypress>;            \
	key-positions = <keypos>;         \
};
/* Combo key positions
 0  1  2  3  4         5  6  7  8  9
10 11 12 13 14        15 16 17 18 19
20 21 22 23 24        25 26 27 28 29
			30 31  32 33             */

/ {
	combos {
		compatible = "zmk,combos";
		COMBO(numb,   &tog NUM,     25 33)
		COMBO(vol_up, &kp C_VOL_UP,  9 19)
		COMBO(vol_dn, &kp C_VOL_DN, 19 29)
		COMBO(caps_w, &caps_word,   10 19)
		// invoke macros
		COMBO(vim_q,  &vim_q,   0  1)
		COMBO(vim_s,  &vim_s,  20 21)
		COMBO(dir_up, &dir_up, 28 29)
		// navigation
		COMBO(nav_dn, NAV_DN,  26 27)
		COMBO(nav_up, NAV_UP,  27 28)
	};
};


#define MACRO(name, keys)             \
name: name##_macro {                  \
	label = #name;                    \
	compatible = "zmk,behavior-macro";\
	#binding-cells = <0>;             \
	tap-ms = <1>;                     \
	wait-ms = <1>;                    \
	bindings = <keys>;                \
};

/ {
	macros {
		MACRO(vim_q,  &kp COLON &kp Q &kp EXCL)
		MACRO(vim_s,  &kp COLON &kp W &kp Q)
		MACRO(dir_up, &kp DOT &kp DOT &kp FSLH)
	};
};

/ {
	keymap {
		compatible = "zmk,keymap";
		BASE_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
			&kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp CAPS
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		   	&kp A     &kp R      &kp S      &kp T     &kp G          &kp M     &kp N        &kp E      &kp I     &kp O
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp Z      &kp X      &kp C      &kp D      &kp V          &kp K       &kp H     &kp COMMA   &kp DOT    &kp FSLH
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
			                                  &mo NAV  &kp SPACE    &mt LSHFT BSPC  &mo NUM
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
		NUM_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
			&kp BSPC    &kp PIPE  &kp PLUS   &kp EQUAL  ________     &kp C_BRI_DN   &kp N7     &kp N8     &kp N9   &kp C_BRI_UP
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp MINUS   &kp SQT   &kp COLON  &kp ENTER  &kp LS(ENTER)  &kp GRAVE   &kp N1      &kp N2   &kp N3      &kp N0
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		    &kp COMMA  &kp AMPS   &kp AT     &kp DOT    ________       ________    &kp N4     &kp N5     &kp N6    &kp STAR
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
			                                 &mo SYM    ________       ________   ________
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
		NAV_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
	  &kp C_VOL_UP   &kp LG(A)   &sk LGUI   &kp LG(S)  &kp C_VOL_DN      ________  &kp C_PREV &kp C_PLAY &kp C_NEXT  ________
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
			&kp LEFT   &kp DOWN   &kp UP   &kp RIGHT   &kp ESC      &kp ENTER  &kp LG(SPACE)  &kp LG(P)  &kp LG(F)   &sk LCTRL
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		   &kp LG(Z)   &kp LG(X)  &kp LG(C)  &kp LC(C)  &kp LG(V)    &kp LC(R)  &sk LSHIFT  &sk LGUI   &sk LALT   &kp LG(FSLH)
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
				                             ________   ________       ________   &mo SYM
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
		SYM_layer {
			bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
			&kp BSPC   &kp ENTER   &kp SPACE &kp LS(TAB) ________     _______      &kp PLUS  &kp LBRC   &kp RBRC    ________
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		  &kp UNDER    &kp DQT    &kp SEMI   &kp TAB    &kp CARET     &kp TILDE   &kp LPAR    &kp EXCL   &kp EQUAL  &kp RPAR
		//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
		    &kp BSLH  &kp PERCENT &kp POUND  &kp DOLLAR  ________    ________    &kp LT     &kp LBKT   &kp RBKT    &kp GT
		//╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
			                                 ________   ________       ________   ________
		//                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
			>;
		};
	};
};